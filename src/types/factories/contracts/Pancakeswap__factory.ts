/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Pancakeswap,
  PancakeswapInterface,
} from "../../contracts/Pancakeswap";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "pancakeswapRouter",
    outputs: [
      {
        internalType: "contract IPancakeRouter01",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "swappingETHForExactTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "testMe",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319167310ed43c718714eb63d5aa57b78b54704e256024e1790556105d0806100466000396000f3fe6080604052600436106100345760003560e01c806349f70d0b14610039578063524158401461004e578063db6754ed146100a3575b600080fd5b61004c6100473660046103b5565b6100db565b005b34801561005a57600080fd5b50604080518082018252600c81527f496d2072657475726e696e6700000000000000000000000000000000000000006020820152905161009a91906103f1565b60405180910390f35b3480156100af57600080fd5b506000546100c3906001600160a01b031681565b6040516001600160a01b03909116815260200161009a565b6040516323b872dd60e01b81523060048201526001600160a01b038281166024830152604482018590528316906323b872dd906064016020604051808303816000875af1158015610130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101549190610446565b5060405163095ea7b360e01b81527310ed43c718714eb63d5aa57b78b54704e256024e6004820152602481018490526001600160a01b0383169063095ea7b3906044016020604051808303816000875af11580156101b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101da9190610446565b50604080516002808252606080830184529260208301908036833701905050905073bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c8160008151811061022357610223610485565b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061025757610257610485565b6001600160a01b039092166020928302919091019091015260405163fb3bdb4160e01b81527310ed43c718714eb63d5aa57b78b54704e256024e9063fb3bdb419034906102ae90889086908890429060040161049b565b60006040518083038185885af11580156102cc573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526102f59190810190610505565b50604051600090339047908381818185875af1925050503d8060008114610338576040519150601f19603f3d011682016040523d82523d6000602084013e61033d565b606091505b50509050806103925760405162461bcd60e51b815260206004820152600d60248201527f726566756e64206661696c656400000000000000000000000000000000000000604482015260640160405180910390fd5b5050505050565b80356001600160a01b03811681146103b057600080fd5b919050565b6000806000606084860312156103ca57600080fd5b833592506103da60208501610399565b91506103e860408501610399565b90509250925092565b600060208083528351808285015260005b8181101561041e57858101830151858201604001528201610402565b81811115610430576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561045857600080fd5b8151801515811461046857600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060808201868352602060808185015281875180845260a086019150828901935060005b818110156104e55784516001600160a01b0316835293830193918301916001016104c0565b50506001600160a01b039690961660408501525050506060015292915050565b6000602080838503121561051857600080fd5b825167ffffffffffffffff8082111561053057600080fd5b818501915085601f83011261054457600080fd5b8151818111156105565761055661046f565b8060051b604051601f19603f8301168101818110858211171561057b5761057b61046f565b60405291825284820192508381018501918883111561059957600080fd5b938501935b828510156105b75784518452938501939285019261059e565b9897505050505050505056fea164736f6c634300080d000a";

type PancakeswapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PancakeswapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Pancakeswap__factory extends ContractFactory {
  constructor(...args: PancakeswapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Pancakeswap> {
    return super.deploy(overrides || {}) as Promise<Pancakeswap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Pancakeswap {
    return super.attach(address) as Pancakeswap;
  }
  override connect(signer: Signer): Pancakeswap__factory {
    return super.connect(signer) as Pancakeswap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PancakeswapInterface {
    return new utils.Interface(_abi) as PancakeswapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Pancakeswap {
    return new Contract(address, _abi, signerOrProvider) as Pancakeswap;
  }
}
