/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";

import type { Pancakeswap, PancakeswapInterface } from "../../contracts/Pancakeswap";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getContractBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pancakeswapRouter",
    outputs: [
      {
        internalType: "contract IPancakeRouter01",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
    ],
    name: "swappingETHForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319167310ed43c718714eb63d5aa57b78b54704e256024e1790556103dd806100466000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636f9fb98a14610046578063d6810cfb14610059578063db6754ed14610079575b600080fd5b6040514781526020015b60405180910390f35b61006c6100673660046101d7565b6100a4565b6040516100509190610213565b60005461008c906001600160a01b031681565b6040516001600160a01b039091168152602001610050565b6040805160028082526060808301845292600092919060208301908036833701905050905073bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c816000815181106100f1576100f161026d565b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106101255761012561026d565b6001600160a01b0390921660209283029190910190910152600061014a42600f610283565b6000805460405163fb3bdb4160e01b815292935090916001600160a01b039091169063fb3bdb41906101869089908790339088906004016102a9565b6000604051808303816000875af11580156101a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101cd9190810190610313565b9695505050505050565b600080604083850312156101ea57600080fd5b8235915060208301356001600160a01b038116811461020857600080fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561024b5783518352928401929184019160010161022f565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600082198211156102a457634e487b7160e01b600052601160045260246000fd5b500190565b600060808201868352602060808185015281875180845260a086019150828901935060005b818110156102f35784516001600160a01b0316835293830193918301916001016102ce565b50506001600160a01b039690961660408501525050506060015292915050565b6000602080838503121561032657600080fd5b82516001600160401b038082111561033d57600080fd5b818501915085601f83011261035157600080fd5b81518181111561036357610363610257565b8060051b604051601f19603f8301168101818110858211171561038857610388610257565b6040529182528482019250838101850191888311156103a657600080fd5b938501935b828510156103c4578451845293850193928501926103ab565b9897505050505050505056fea164736f6c634300080d000a";

type PancakeswapConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: PancakeswapConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class Pancakeswap__factory extends ContractFactory {
  constructor(...args: PancakeswapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Pancakeswap> {
    return super.deploy(overrides || {}) as Promise<Pancakeswap>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Pancakeswap {
    return super.attach(address) as Pancakeswap;
  }
  override connect(signer: Signer): Pancakeswap__factory {
    return super.connect(signer) as Pancakeswap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PancakeswapInterface {
    return new utils.Interface(_abi) as PancakeswapInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Pancakeswap {
    return new Contract(address, _abi, signerOrProvider) as Pancakeswap;
  }
}
