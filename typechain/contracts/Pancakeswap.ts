/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "../common";

export interface PancakeswapInterface extends utils.Interface {
  functions: {
    "getContractBalance()": FunctionFragment;
    "pancakeswapRouter()": FunctionFragment;
    "swappingETHForExactTokens(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getContractBalance" | "pancakeswapRouter" | "swappingETHForExactTokens",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getContractBalance", values?: undefined): string;
  encodeFunctionData(functionFragment: "pancakeswapRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "swappingETHForExactTokens", values: [BigNumberish, string]): string;

  decodeFunctionResult(functionFragment: "getContractBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pancakeswapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swappingETHForExactTokens", data: BytesLike): Result;

  events: {};
}

export interface Pancakeswap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PancakeswapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getContractBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    pancakeswapRouter(overrides?: CallOverrides): Promise<[string]>;

    swappingETHForExactTokens(
      amountOut: BigNumberish,
      tokenOut: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

  pancakeswapRouter(overrides?: CallOverrides): Promise<string>;

  swappingETHForExactTokens(
    amountOut: BigNumberish,
    tokenOut: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeswapRouter(overrides?: CallOverrides): Promise<string>;

    swappingETHForExactTokens(
      amountOut: BigNumberish,
      tokenOut: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    swappingETHForExactTokens(
      amountOut: BigNumberish,
      tokenOut: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getContractBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swappingETHForExactTokens(
      amountOut: BigNumberish,
      tokenOut: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
